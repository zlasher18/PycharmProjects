import numpy as np

def f(x):
    f = x[0]**2 + (x[1] - 3)**2
    return f

def grad(x):
    grad = np.array([2*x[0], 2*x[1]-3])
    return grad

def g(x):
    g = np.array([x[1]**2 - 2* x[0], (x[1]-1)**2+5*x[0]-15])
    return g

def dg(x):
    dg = np.array([[-2, 2*x[1]],[5,2*x[1]-1]])
    return dg

# from 11/2 class
def linesearch(x,s,mu, w):
    t = 0.1
    alpha = 1

    weight = np.zeros(2,1)
    weight[0] = max(abs(mu[0]), 0.5* (w[0] +abs(mu[0])))
    weight[1] = max(abs(mu[1]), 0.5* (w[1] +abs(mu[1]))) # weight values based on mu

    if g(x)[0,:] <= 0:
        dgdalpha1 = 0
    else:
        dgdalpha1 = np.matmul(dg(x),s)
    if g(x)[1,:] <= 0:
        dgdalpha2 = 0
    else:
        dgdalpha2 = np.matmul(dg(x),s)

    dFdalpha = np.matmul(df(x),s)+ (weight[0,:]*dgdalpha1 + w[1,:] * dgdaplha2

    def Falpha(x,w,a,s): #merit function
        g1 = max(0,g(x+alpha*s)[[0,:]])
        g2 = max(0,g(x+alpha*s)[[1,:]])
        F = f(x+alpha*s) + (weight[0,:] * g1 + weight[1,:] * g2)
        return F

    phi = F + t * alpha * dFdalpha
    while phi , Falpha(x,w,a,s):
        alpha = 0.5 *alpha

    return a,weight


